Solr processors

Implements processors for use in the Solr update request processor chain.

The project contains the following processors:

- AllowDisallowIndexingProcessor
- HTMLStripCharFilterProcessor


==============================
AllowDisallowIndexingProcessor
==============================

The AllowDisallowIndexingProcessor makes it possible to configure rules based on field content for deciding whether or not a given document should be indexed or not.

The use case for processor:
A system not under your control pushes documents to be indexed and you don't want all the document types in the index. 

An example of this use case is Escenics indexer-webapp.


The processor is configured by supplying the lst element with a name indicating the semantics of the processor, which can be either allow or disallow. The semantics work as follows:

allow : Indexes documents matching at least one rule in the list, dropping everything else.

disallow : Indexes documents that doesn't match any rules in the list.

Rules are defined by using the str element giving the field to check in the name attribute and the match rule as the value of the element.

Example allow rule only indexing documents with a field contenttype set to article

<lst name="allow">
  <str name="contenttype">article</str>
</lst>
 
If more than one rule is supplied they are checked untill one of them matches or none of them matched.



============================
HTMLStripCharFilterProcessor
============================

The HTMLStripCharFilterProcessor makes it possible to run the character filter HTMLStripCharFilter on a field before it's delivered to Solr for indexing. This can be especially convient when the application doing the indexing is not controlled by you. This can be a content management system sending fields with markup that you want to use for highligthing and therefore needs to markup removed for it to really be usable.

You configure the HTMLStripCharFilterProcessor, in solrconfig.xml, as follows:

1) Define a updateRequestProcessorChain as shown below

<updateRequestProcessorChain name="fishy">
  <processor class="dk.industria.solr.processors.HTMLStripCharFilterProcessorFactory">
    <str name="field">rubrik_text</str>
    <str name="field">underrubrik_text</str>
    <str name="field">broedtekst_text</str>
    <str name="field">section</str> <!-- For debugging multi value fields -->
  </processor>
  <processor class="solr.LogUpdateProcessorFactory" />
  <processor class="solr.RunUpdateProcessorFactory" />
</updateRequestProcessorChain>

the <str name="field> elements allows you to configure the fields the processor will run HTMLStripCharFilter on.


2) Register the processor chain with your update request handler as shown below

<requestHandler name="/update" class="solr.XmlUpdateRequestHandler">
  <lst name="defaults">
    <str name="update.processor">fishy</str>
  </lst>
</requestHandler>

3) Make the JAR file available in the classpath. 
  
If you are running Solr with multiple cores define a shared lib in the solr.xml and place the JAR in the folder. Solr will add the files in that folder to the classpath.


   
